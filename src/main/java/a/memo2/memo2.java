/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package a.memo2;

import javax.swing.text.BadLocationException;

import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.io.File;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;


/**
 *
 * @author user
 */
public class memo2 extends javax.swing.JFrame {

    /**
     * Creates new form memo2
     */
    public memo2() {
        initComponents();
        // 選択範囲のカーソル色を設定
        jTextPane1.setSelectedTextColor(Color.GREEN);
        Calendar cal = Calendar.getInstance();
        jDateChooser1.setDate(cal.getTime());
        
        // 一年分の日付データを格納しているフォルダパスを取得する
        File file = new File(FILE_NAME);
        if (file.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                jTextField1.setText(reader.readLine());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDateChooser1.setToolTipText("日付を選択すると、その日付のテキストが表示されます");
        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jButton1.setText("☑");
        jButton1.setToolTipText("マウスで選択した範囲の行頭にチェックボックスを入れます");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("☒");
        jButton2.setToolTipText("マウスで選択した範囲の行頭からチェックボックスを外します");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2024", "2025", "2026", "2027" }));
        jComboBox1.setToolTipText("ファイルの年度を選択します");

        jTextPane1.setBackground(new java.awt.Color(0, 102, 153));
        jTextPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTextPane1);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "そのまま", "新規作成", " " }));
        jComboBox2.setToolTipText("そのまま／新規作成から選択します");

        jButton3.setText("▷");
        jButton3.setToolTipText("テキストデータを保存するファイルを新規作成します");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jTextField1.setText("dataの保存フォルダのパス");

        jLabel1.setText("data保存フォルダ→");

        jButton4.setText("★");
        jButton4.setToolTipText("テキストの内容を保存するファイルのパスを選択表示します");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("Save");
        jButton5.setToolTipText("その日のデータを保存します");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addComponent(jTextField1)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)
                        .addComponent(jComboBox1)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)
                        .addComponent(jButton5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    //　文字列の選択範囲にチェックボックスを入れる
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        try {
            insertCheckBox(jTextPane1);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }       
    }//GEN-LAST:event_jButton1MouseClicked

    //　選択範囲からチェックボックスを外す
    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        try {
            removeCheckBox(jTextPane1);
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton2MouseClicked

    //　カレンダーの日付を選択すると保存されているテキストが表示される
    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        //　JdateChooserで日付を選択変更した場合のみコードを実行するためのIF文
        if ("date".equals(evt.getPropertyName())) {  
            String fpath = null;
            try {
                // TODO add your handling code here:
                Date selecteddate = jDateChooser1.getDate();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
                SimpleDateFormat sdfmonth = new SimpleDateFormat("M");
                SimpleDateFormat sdfdate = new SimpleDateFormat("d");
                
                String sdate = sdf.format(selecteddate);
                
                String mstr = sdfmonth.format(selecteddate);
                String dstr = sdfdate.format(selecteddate);
                int m = Integer.valueOf(mstr)-1;
                int d = Integer.valueOf(dstr)-1;
                
                try(BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))){
                    fpath = reader.readLine();
                } catch (IOException e){
                    e.printStackTrace();
                }
            
                String targetYear = String.valueOf(jComboBox1.getSelectedItem());
                
                String fname = "data" + targetYear + ".json";
                String fpn = fpath + fname;
                File f = new File(fpn);
                
                if (f.exists()){
                    ObjectMapper mapper = new ObjectMapper();
                    JsonNode root = mapper.readTree(f);

                    //String jsonString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(root);
                    String todaydata = root.get("months").get(m).get("days").get(d).get("contents").textValue();                
                    jTextPane1.setText(todaydata);                
                } else {
                    jTextPane1.setText("データ保存用ファイルがありません。画面右側の「▷」ボタンで作成してください。");
                }
                
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jDateChooser1PropertyChange
    //　年度毎のテキスト保存ファイルを新規作成する
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        try {
            int select = jComboBox2.getSelectedIndex();
            String selectyear = String.valueOf(jComboBox1.getSelectedItem());

            // ▷を押したら該当する年度のファイルを検索する
            String path = jTextField1.getText();
            if (path != ""){
                File dir = new File(jTextField1.getText());     
                //ListFilesメソッドを使用して一覧を取得する
                File[] pathlist = dir.listFiles();
                String[] namelist = dir.list();
                boolean flag = false;
                
                //　Selectyear（指定した年度）のテキスト保存ファイルの存在を確認
                for (String list: namelist){
                    int n = list.indexOf(selectyear);
                    if (n >= 0){
                        flag = true;
                    } 
                }
                
                //　年度のファイルがあった場合の処理
                if (flag){
                    if (select == 1){
                        int response = JOptionPane.showConfirmDialog(null, selectyear + "年はあります。新しいファイルに置き換えますか？", "確認", JOptionPane.YES_NO_OPTION);
                        if (response == JOptionPane.YES_OPTION) {
                            createFile(selectyear, path);
                        } else if (response == JOptionPane.NO_OPTION) {
                            JOptionPane.showMessageDialog(null, "元のファイルを使用します。", "ダイアログタイトル", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "キャンセルします。", "ダイアログタイトル", JOptionPane.INFORMATION_MESSAGE);
                        }                
                    } else if (select == 0){
                            JOptionPane.showMessageDialog(null, "元のファイルを使用します。", "ダイアログタイトル", JOptionPane.INFORMATION_MESSAGE);
                    }
                //　年度のファイルがなかった場合の処理
                } else {
                    if (select == 1){
                        int response = JOptionPane.showConfirmDialog(null, selectyear + "年はありません。新しいファイルを作成しますか？", "確認", JOptionPane.YES_NO_OPTION);
                        if (response == JOptionPane.YES_OPTION) {
                            createFile(selectyear, path);
                        } else if (response == JOptionPane.NO_OPTION) {
                            JOptionPane.showMessageDialog(null, "キャンセルします。", "ダイアログタイトル", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "キャンセルします。", "ダイアログタイトル", JOptionPane.INFORMATION_MESSAGE);
                        }                
                    } else if (select == 0){
                            JOptionPane.showMessageDialog(null, "キャンセルします。", "ダイアログタイトル", JOptionPane.INFORMATION_MESSAGE);
                    }                
                }

            } else {
                return;
            }            
        } catch (BadLocationException ex){
            ex.getStackTrace();
        }

    }//GEN-LAST:event_jButton3MouseClicked

    //　テキストデータを保存するフォルダパスを表示し、フォルダパスファイルも同時に保存する
    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        //　JFrameを作成して非表示に設定
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(false);
        //　フォルダ選択ダイアローグを表示
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int result = fileChooser.showOpenDialog(frame);
       
        // フォルダのパスを取得する
        if (result == JFileChooser.APPROVE_OPTION){
            String selectedFolderPath = fileChooser.getSelectedFile().getAbsolutePath();
            jTextField1.setText(selectedFolderPath + "\\");
         
            String path = jTextField1.getText();
            try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_NAME))) {
                writer.println(path);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            jTextField1.setText("ここにデータ保存フォルダパスを表示して下さい");
        }
    }//GEN-LAST:event_jButton4MouseClicked

    //　データを日付毎にセーブする
    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            Date selecteddate = jDateChooser1.getDate();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
            SimpleDateFormat sdfmonth = new SimpleDateFormat("M");
            SimpleDateFormat sdfdate = new SimpleDateFormat("d");

            String sdate = sdf.format(selecteddate);

            String mstr = sdfmonth.format(selecteddate);
            String dstr = sdfdate.format(selecteddate);
            int m = Integer.valueOf(mstr)-1;
            int d = Integer.valueOf(dstr)-1;

            String fpath = jTextField1.getText();

            String targetYear = String.valueOf(jComboBox1.getSelectedItem());
            String fname = "data" + targetYear + ".json";             
            String fpn = fpath + fname;
            File f = new File(fpn);

            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(f);
            JsonNode todaydata = root.get("months").get(m).get("days").get(d);            
                     
            String data = jTextPane1.getText();
            
            if (todaydata instanceof ObjectNode){
                ((ObjectNode) todaydata).put("contents", data);
            }
            
            System.out.println((JsonNode) todaydata);
            
            mapper.writerWithDefaultPrettyPrinter().writeValue(f, root);            
        
        } catch (IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5MouseClicked

    private static final String FILE_NAME = "path_storage.txt"; // テキストファイル名
    
    //　チェックボックスを入れるメソッド
    public static void insertCheckBox(JTextPane jTextPane1) throws BadLocationException {
        // Get the caret position and the document
        int start = jTextPane1.getSelectionStart();
        int end = jTextPane1.getSelectionEnd();
        Document doc = jTextPane1.getDocument();

        // Find the start of the line containing the selection
        int linepointer = end;
        
        while (linepointer > 0) {
            char c = doc.getText(linepointer - 1, 1).charAt(0);           
            
            if (c == '\n'){
                // Insert the checkbox at the line start
                JCheckBox checkBox = new JCheckBox();
                checkBox.setOpaque(false);  // Make the checkbox background transparent

                // Get the styled document to insert the component
                StyledDocument styledDoc = jTextPane1.getStyledDocument();
                SimpleAttributeSet attrs = new SimpleAttributeSet();
                StyleConstants.setComponent(attrs, checkBox);
                
                // not to make checkbox double
                Element element = styledDoc.getCharacterElement(linepointer);
                AttributeSet check = element.getAttributes();
                Component comp = StyleConstants.getComponent(check);
                if (comp instanceof JCheckBox){
                } else {
                    styledDoc.insertString(linepointer, " ", attrs); // Insert a space for the checkbox
                }
                if (linepointer <= start) break; 
            }
            linepointer--; 
        }
     
        char cfirst = doc.getText(0, start).charAt(0);
        if (cfirst != '\n'){
            JCheckBox checkBox = new JCheckBox();
            checkBox.setOpaque(false);  // Make the checkbox background transparent

            // Get the styled document to insert the component
            StyledDocument styledDocF = jTextPane1.getStyledDocument();
            SimpleAttributeSet attrs1 = new SimpleAttributeSet();
            StyleConstants.setComponent(attrs1, checkBox);

            Element element = styledDocF.getCharacterElement(linepointer);
            AttributeSet check1 = element.getAttributes();
            Component comp1 = StyleConstants.getComponent(check1);            
            
            if (comp1 instanceof JCheckBox){                    
            } else {
                styledDocF.insertString(0 , " ", attrs1);
            }
        }


    }

    //　チェックボックスを外すメソッド
    public static void removeCheckBox(JTextPane jTextPane1) throws BadLocationException {
        // Get the caret position and the document
        int start = jTextPane1.getSelectionStart();
        int end = jTextPane1.getSelectionEnd();
        Document doc = jTextPane1.getDocument();
        
        // Find the start of the line containing the selection
        int linepointer = end;
        boolean b = false;
        
        for (int i = 0; i <= start ; i++){
            char charcheck = doc.getText(i, 1).charAt(0);
            if (charcheck == '\n'){
                b = true;
            }
        }
        
        if (b){
            while (linepointer > 0) {
                char c = doc.getText(linepointer - 1, 1).charAt(0);
                char prev = doc.getText(linepointer, 1).charAt(0);
                if (c == '\n' && !Character.isLetter(prev)) {
                    // Get the styled document to insert the component
                    StyledDocument styledDocF = jTextPane1.getStyledDocument();
                    styledDocF.remove(linepointer, 1);                
                    if (linepointer <= start) break;
                }
                linepointer--;
            }
            // Get the styled document to insert the component

        } else {
            while (linepointer > 0) {
                char c = doc.getText(linepointer - 1, 1).charAt(0);
                char prev = doc.getText(linepointer, 1).charAt(0);
                if (c == '\n' && !Character.isLetter(prev)) {
                    // Get the styled document to insert the component
                    StyledDocument styledDocF = jTextPane1.getStyledDocument();
                    styledDocF.remove(linepointer, 1);                
                    if (linepointer <= start) break;
                }
                linepointer--;
            }
            if (!Character.isLetter(doc.getText(0, 1).charAt(0))){
                StyledDocument styledDoc = jTextPane1.getStyledDocument();
                styledDoc.remove(0, 1);
        
            }
        }
    }
    
    //　年度ファイルを作成するメソッド
    public static void createFile(String text1, String text2) throws BadLocationException {
        String targetyear = text1;
        String filename = "data" + targetyear + ".json";
        String filepath = text2 + "\\";
        String fn = filepath + filename;
        
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.YEAR, Integer.valueOf(targetyear));
        
        // ObjectMapperのインスタンスを作成
        ObjectMapper mapper = new ObjectMapper();    
        
        // データをObjectNodeとして作成
        ObjectNode thisyear = mapper.createObjectNode();
        thisyear.put("year", "2024");
                
        ArrayNode months = mapper.createArrayNode();
       
        for (int i = 1 ; i <= 12 ; i++){
            ObjectNode eachmonth = mapper.createObjectNode();
            eachmonth.put("month", i);
            
            ArrayNode days = mapper.createArrayNode();
            
            cal.set(Calendar.MONTH, i - 1);
            int lastDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

            for (int j = 1 ; j < lastDay ; j++){
                cal.set(Calendar.DATE, j);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
                ObjectNode eachdate = mapper.createObjectNode();
                eachdate.put("date", sdf.format(cal.getTime()));
                eachdate.put("contents", "本日の予定：");
                days.add(eachdate);
            }
            
            eachmonth.set("days",days);
            months.add(eachmonth);
        }

        thisyear.set("months", months);
                
        // 作成した住所録のJSONを出力
        try {
            // JSONデータをファイルに保存
            mapper.writeValue(new File(fn), thisyear);

        } catch (IOException e) {
            e.printStackTrace();
        }
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(memo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(memo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(memo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(memo2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new memo2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
